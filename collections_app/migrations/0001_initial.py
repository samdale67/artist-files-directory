# Generated by Django 3.0.5 on 2020-07-13 23:23

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('collectors_app', '0045_auto_20200710_1603'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consortium', models.BooleanField(blank=True, help_text='Check if you have selected more than one collector in the field above.', verbose_name='Consortial Collection?')),
                ('name', models.CharField(default='General Artist Files Collection', help_text='Use "General Artist Files Collection" if describing collection as one combined entry; otherwise, create a separate entry for each formally named collection or collection with special characteristics, for example "The Nettie Wheeler Artist Files on Native American Artists. Multiple collections allowed and encouraged."', max_length=255, verbose_name='Collection Name')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Provide a general description of the collection, including such aspects as history and provenance. Also use this field for general notes about the collection.', max_length=3000, verbose_name='Description')),
                ('quote', models.TextField(blank=True, help_text='Provide a pithy quote or tagline for the collection. This field automatically adds quotes.', max_length=500, verbose_name='Quote')),
                ('quote_attrib', models.CharField(blank=True, help_text='Provide the source of quote or tagline if applicable, including, at minimum, name, title, institution.', max_length=255, verbose_name='Quote Attribution')),
                ('access', ckeditor.fields.RichTextField(blank=True, help_text='Add policies and procedures relating to how researchers access and use the collection.', max_length=1000, verbose_name='Access and Use')),
                ('website', models.URLField(blank=True, help_text='Add website describing or providing access to the collection.', max_length=255, verbose_name='Website')),
                ('size', ckeditor.fields.RichTextField(blank=True, default='', help_text='Provide a statement about the size of the collection, including growth rate, etc. Use whatever measurement terms are relevant.', max_length=1000, verbose_name='Size')),
                ('dig_projects', ckeditor.fields.RichTextField(blank=True, help_text='Describe digital projects, either completed or planned, for this collection.', max_length=3000, verbose_name='Digital Projects')),
                ('dig_access', models.URLField(blank=True, help_text='Provide URL for accessing digital collection.', max_length=255, verbose_name='Digital Project Website')),
                ('notes', ckeditor.fields.RichTextField(blank=True, help_text='Use this field for information that does not fit elsewhere.', max_length=1000, verbose_name='Notes')),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_saved', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Collection',
                'verbose_name_plural': '** Collections',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionCatSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat_name', models.CharField(max_length=100, verbose_name='Cataloging System')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Cataloging System',
                'verbose_name_plural': 'Cataloging Systems',
                'ordering': ['cat_name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serv_name', models.CharField(max_length=100, verbose_name='Reference Service')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Reference Service',
                'verbose_name_plural': 'Reference Services',
                'ordering': ['serv_name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSpecialFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('special_format', models.CharField(max_length=100, verbose_name='Special Format')),
                ('special_format_url', models.URLField(blank=True, help_text='Provide URI from <a href="http://id.loc.gov/vocabulary/graphicMaterials.html" target="_blank">Thesaurus for Graphic Materials</a>, <a href="http://id.loc.gov/authorities/genreForms.html" target="_blank">Library of Congress Genre/Form Terms</a>, <a href="http://www.wikipedia.org" target="_blank">Wikipedia</a> URL, or other URL.', max_length=255, verbose_name='Term Reference')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Special Format',
                'verbose_name_plural': 'Special Formats',
                'ordering': ['special_format'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_city', models.CharField(help_text='Use term from <a href="http://id.loc.gov/authorities/subjects.html" target="_blank">Library of Congress Subject Headings</a> or other authority if available.', max_length=100, verbose_name='Subject: City')),
                ('sub_city_url', models.URLField(blank=True, default='', help_text='Provide URI to term.', max_length=255, verbose_name='Term Reference')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Subject: City',
                'verbose_name_plural': 'Subject: Cities',
                'ordering': ['sub_city'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_country', models.CharField(help_text='Use term from <a href="http://id.loc.gov/authorities/subjects.html" target="_blank">Library of Congress Subject Headings </a> or other authority if available.', max_length=100, verbose_name='Subject: Country')),
                ('sub_country_url', models.URLField(blank=True, help_text='Provide URI to term.', max_length=255, verbose_name='Term Reference')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Subject: Country',
                'verbose_name_plural': 'Subject: Countries',
                'ordering': ['sub_country'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectCounty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_county', models.CharField(help_text='Use term from <a href="http://id.loc.gov/authorities/subjects.html" target="_blank">Library of Congress Subject Headings </a> or other authority if available.', max_length=100, verbose_name='Subject: County')),
                ('sub_county_url', models.URLField(blank=True, help_text='Provide URI to term.', max_length=255, verbose_name='Term Reference')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Subject: County',
                'verbose_name_plural': 'Subject: Counties',
                'ordering': ['sub_county'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectGeoArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_geo_area', models.CharField(help_text='Use term from <a href="http://id.loc.gov/authorities/subjects.html" target="_blank">Library of Congress Subject Headings </a> or other authority if available.', max_length=100, verbose_name='Subject: Geographic Area')),
                ('sub_geo_area_url', models.URLField(blank=True, help_text='Provide URI to term.', max_length=255, verbose_name='Term Reference')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Subject: Geographic Area',
                'verbose_name_plural': 'Subject: Geographic Areas',
                'ordering': ['sub_geo_area'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_name', models.CharField(help_text='Use preferred <a href="http://www.viaf.org" target="_blank">VIAF</a> form of name if available. Remove delimiters and subfields, e.g. "Hughston, Milan R., 1954- "', max_length=100, verbose_name='Subject: Name')),
                ('sub_name_url', models.URLField(blank=True, help_text='Provide <a href="http://www.viaf.org" target="_blank">VIAF</a> permalink.', max_length=255, verbose_name='Form of Name Reference')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Subject: Name',
                'verbose_name_plural': 'Subject: Names',
                'ordering': ['sub_name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectStateProv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_state_prov', models.CharField(help_text='Use term from <a href="http://id.loc.gov/authorities/subjects.html" target="_blank">Library of Congress Subject Headings</a> or other authority if available.', max_length=100, verbose_name='Subject: State/Province')),
                ('sub_state_prov_url', models.URLField(blank=True, help_text='Provide URI to term.', max_length=255, verbose_name='Term Reference')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Subject: State/Province',
                'verbose_name_plural': 'Subject: State/Provinces ',
                'ordering': ['sub_state_prov'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_topic', models.CharField(help_text='Use term from <a href="http://id.loc.gov/authorities/subjects.html" target="_blank">Library of Congress Subject Headings </a> or other authority if available.', max_length=100, verbose_name='Subject: Topic')),
                ('sub_topic_url', models.URLField(blank=True, default='', help_text='Provide URI to term.', max_length=255, verbose_name='Term Reference')),
                ('notes', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Subject: Topic',
                'verbose_name_plural': 'Subject: Topics',
                'ordering': ['sub_topic'],
            },
        ),
        migrations.CreateModel(
            name='CollectionImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Upload images (please limit to five) showing example material from files and/or storage systems in use. Show us the fun stuff!', upload_to='collection/images/', verbose_name='Add Image')),
                ('image_caption', models.CharField(default='', help_text='Provide a short yet descriptive caption describing the image. 50 character limit.', max_length=50, verbose_name='Image Caption')),
                ('collection', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='collections', to='collections_app.Collection', verbose_name='Related Collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Collection Image',
                'verbose_name_plural': 'Collection Images',
                'ordering': ['image_caption'],
            },
        ),
        migrations.CreateModel(
            name='CollectionDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(help_text='Upload documents such as use guides or collection development statements.', upload_to='collection/documents/', verbose_name='Add Document')),
                ('document_caption', models.CharField(default='', help_text='Provide a short caption describing the document.', max_length=255, verbose_name='Document Caption')),
                ('collection', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='collections_app.Collection', verbose_name='Related Collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Collection Document',
                'verbose_name_plural': 'Collection Documents',
                'ordering': ['document_caption'],
            },
        ),
        migrations.AddField(
            model_name='collection',
            name='cat_system',
            field=models.ManyToManyField(blank=True, help_text='Add systems used for cataloging artist files collection. Create a new system if there is not a fit.', related_name='collections', to='collections_app.CollectionCatSystem', verbose_name='Cataloging Systems'),
        ),
        migrations.AddField(
            model_name='collection',
            name='collector',
            field=models.ManyToManyField(help_text='Choose a collector or collectors responsible for the artist files collection. A collection can have multiple owners, for example, in the case of consortial or collaborative digital projects. Hold down “Control” or “Command” to select more than one.', related_name='collections', to='collectors_app.Collector', verbose_name='Collector(s)'),
        ),
        migrations.AddField(
            model_name='collection',
            name='service',
            field=models.ManyToManyField(blank=True, help_text='Add reference services offered. Create a new service if there is not a fit.', related_name='collections', to='collections_app.CollectionService', verbose_name='Reference Services'),
        ),
        migrations.AddField(
            model_name='collection',
            name='spec_format',
            field=models.ManyToManyField(blank=True, help_text='Add special formats contained in the collection, either analog or digital. Create a new type if there is not a fit.', related_name='collections', to='collections_app.CollectionSpecialFormat', verbose_name='Special Formats'),
        ),
        migrations.AddField(
            model_name='collection',
            name='subject_city',
            field=models.ManyToManyField(blank=True, help_text='Add cities that are subject focuses of the files.', related_name='collections', to='collections_app.CollectionSubjectCity', verbose_name='Subject: Cities'),
        ),
        migrations.AddField(
            model_name='collection',
            name='subject_country',
            field=models.ManyToManyField(blank=True, help_text='Add countries that are subject focuses of the files.', related_name='collections', to='collections_app.CollectionSubjectCountry', verbose_name='Subject: Countries'),
        ),
        migrations.AddField(
            model_name='collection',
            name='subject_county',
            field=models.ManyToManyField(blank=True, help_text='Add counties that are subject focuses of the files.', related_name='collections', to='collections_app.CollectionSubjectCounty', verbose_name='Subject: Counties'),
        ),
        migrations.AddField(
            model_name='collection',
            name='subject_geo_area',
            field=models.ManyToManyField(blank=True, help_text='Add geographic areas, such as "West U.S." that are subject focuses of the files.', related_name='collections', to='collections_app.CollectionSubjectGeoArea', verbose_name='Subject: Geographic Areas'),
        ),
        migrations.AddField(
            model_name='collection',
            name='subject_name',
            field=models.ManyToManyField(blank=True, help_text='Add personal and institutional names that are subjects of the collection.', related_name='collections', to='collections_app.CollectionSubjectName', verbose_name='Subject: Names'),
        ),
        migrations.AddField(
            model_name='collection',
            name='subject_state_prov',
            field=models.ManyToManyField(blank=True, help_text='Add states or provinces that are subject focuses of the files.', related_name='collections', to='collections_app.CollectionSubjectStateProv', verbose_name='Subject: States and Provinces'),
        ),
        migrations.AddField(
            model_name='collection',
            name='subject_topic',
            field=models.ManyToManyField(blank=True, help_text='Add topical terms that are the subject focuses of the files.', related_name='collections', to='collections_app.CollectionSubjectTopic', verbose_name='Subject: Topics'),
        ),
        migrations.AddField(
            model_name='collection',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
