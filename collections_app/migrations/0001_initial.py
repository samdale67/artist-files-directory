# Generated by Django 3.0.5 on 2020-05-07 00:55

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CollectionCatSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_cat_name', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_cat_name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionLanguage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_lang', models.CharField(help_text='Use language term from http://id.loc.gov/vocabulary/languages.html', max_length=100)),
                ('coll_lang_url', models.URLField(help_text='Provide URI for term from http://id.loc.gov/vocabulary/languages.html', max_length=255)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_lang'],
            },
        ),
        migrations.CreateModel(
            name='CollectionService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_serv_name', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_serv_name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSpecialFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_special_format', models.CharField(max_length=100)),
                ('coll_special_format_thesaurus', models.CharField(choices=[('TGM', 'Thesaurus for Graphic Materials'), ('LCGFT', 'LC Genre/Form Terms'), ('Other', 'Other')], max_length=10)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_special_format'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_sub_city', models.CharField(help_text='Use preferred VIAF form of name', max_length=100)),
                ('coll_sub_city_url', models.URLField(help_text='Provide VIAF permalink', max_length=255)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_sub_city'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_sub_country', models.CharField(choices=[('CA', 'Canada'), ('MX', 'Mexico'), ('US', 'United States')], max_length=2)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_sub_country'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectCounty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_sub_county', models.CharField(help_text='Use preferred VIAF form of name', max_length=100)),
                ('coll_sub_county_url', models.URLField(help_text='Provide VIAF permalink', max_length=255)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_sub_county'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectGeoArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_sub_geo_area', models.CharField(help_text='Use preferred VIAF form of name', max_length=100)),
                ('coll_sub_geo_area_url', models.URLField(help_text='Provide VIAF permalink', max_length=255)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_sub_geo_area'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_sub_name', models.CharField(help_text='Use preferred VIAF form of name', max_length=100)),
                ('coll_sub_name_url', models.URLField(help_text='Provide VIAF permalink', max_length=255)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_sub_name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectStateProv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_sub_state_prov', models.CharField(help_text='Use preferred VIAF form of name', max_length=100)),
                ('coll_sub_state_prov_url', models.URLField(help_text='Provide VIAF permalink', max_length=255)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_sub_state_prov'],
            },
        ),
        migrations.CreateModel(
            name='CollectionSubjectTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_sub_topic', models.CharField(max_length=100)),
                ('coll_sub_thesaurus', models.CharField(choices=[('LCSH', 'Library of Congress Subject Headings'), ('TGM', 'Thesaurus for Graphic Materials'), ('Other', 'Other')], max_length=10)),
                ('definition', models.TextField(blank=True, max_length=500)),
            ],
            options={
                'ordering': ['coll_sub_topic'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coll_name', models.CharField(help_text='Use for formal name of a collection or to describe a collection with special characteristics, for example The Nettie Wheeler Artist Files on Native American Artists', max_length=255)),
                ('coll_website', models.URLField(blank=True, help_text='Website describing or providing access to the collection', max_length=255)),
                ('coll_access', models.TextField(help_text='Use for policies and procedures relating to how researchers access and use the collection', max_length=1000)),
                ('coll_size', models.TextField(help_text='Use to describe the size of collection, expected growth, etc.', max_length=1000)),
                ('coll_provenance', models.TextField(help_text='Describe the ownership history of the collection', max_length=1000)),
                ('coll_dig_projects', models.TextField(blank=True, help_text='Use for describing digital projects, either completed or planned', max_length=1000)),
                ('coll_dig_access', models.URLField(blank=True, help_text='Provide URL for accessing digital collection', max_length=255)),
                ('coll_images', models.ImageField(blank=True, help_text='Upload images showing storage systems and/or example material from files', upload_to='collection/images/')),
                ('coll_loc_city', models.CharField(max_length=255)),
                ('coll_loc_county', models.CharField(max_length=255)),
                ('coll_loc_state_prov', models.CharField(max_length=255)),
                ('coll_loc_country', models.CharField(max_length=255)),
                ('coll_loc_zip', models.CharField(max_length=255)),
                ('coll_date_created', models.DateField(auto_now_add=True)),
                ('coll_date_saved', models.DateField(auto_now=True)),
                ('coll_cat_system', models.ManyToManyField(help_text='Add systems used for cataloging artist files collection', related_name='Collection', to='collections_app.CollectionCatSystem')),
                ('coll_services', models.ManyToManyField(help_text='Add all available services', related_name='Collection', to='collections_app.CollectionService')),
                ('coll_spec_formats', models.ManyToManyField(blank=True, help_text='Add any special formats contained in the collection, either print or digital.', related_name='Collection', to='collections_app.CollectionSpecialFormat')),
                ('coll_subject_city', models.ManyToManyField(help_text='Add cities that are subject focuses of the files', related_name='Collection', to='collections_app.CollectionSubjectCity')),
                ('coll_subject_country', models.ManyToManyField(help_text='Add countries that are subject focuses of the files', related_name='Collection', to='collections_app.CollectionSubjectCountry')),
                ('coll_subject_county', models.ManyToManyField(help_text='Add counties that are subject focuses of the files', related_name='Collection', to='collections_app.CollectionSubjectCounty')),
                ('coll_subject_geo_area', models.ManyToManyField(help_text='Add geographic areas, such as West U.S. that are subject focuses of the files', related_name='Collection', to='collections_app.CollectionSubjectGeoArea')),
                ('coll_subject_name', models.ManyToManyField(help_text='Use for personal and institutional names that are subjects of the collection', related_name='Collection', to='collections_app.CollectionSubjectName')),
                ('coll_subject_state_prov', models.ManyToManyField(help_text='Add states or provinces that are subject focuses of the files', related_name='Collection', to='collections_app.CollectionSubjectStateProv')),
                ('coll_subject_topic', models.ManyToManyField(help_text='Add topical terms that are the subject focuses of the files', related_name='Collection', to='collections_app.CollectionSubjectTopic')),
            ],
        ),
    ]
